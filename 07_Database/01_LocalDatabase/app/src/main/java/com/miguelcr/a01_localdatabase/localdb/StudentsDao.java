package com.miguelcr.a01_localdatabase.localdb;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STUDENTS".
*/
public class StudentsDao extends AbstractDao<Students, Long> {

    public static final String TABLENAME = "STUDENTS";

    /**
     * Properties of entity Students.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Age = new Property(2, Integer.class, "age", false, "AGE");
        public final static Property Repeat = new Property(3, Boolean.class, "repeat", false, "REPEAT");
        public final static Property IdSubject = new Property(4, Long.class, "idSubject", false, "ID_SUBJECT");
    };


    public StudentsDao(DaoConfig config) {
        super(config);
    }
    
    public StudentsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STUDENTS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"AGE\" INTEGER," + // 2: age
                "\"REPEAT\" INTEGER," + // 3: repeat
                "\"ID_SUBJECT\" INTEGER);"); // 4: idSubject
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STUDENTS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Students entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Integer age = entity.getAge();
        if (age != null) {
            stmt.bindLong(3, age);
        }
 
        Boolean repeat = entity.getRepeat();
        if (repeat != null) {
            stmt.bindLong(4, repeat ? 1L: 0L);
        }
 
        Long idSubject = entity.getIdSubject();
        if (idSubject != null) {
            stmt.bindLong(5, idSubject);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Students entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Integer age = entity.getAge();
        if (age != null) {
            stmt.bindLong(3, age);
        }
 
        Boolean repeat = entity.getRepeat();
        if (repeat != null) {
            stmt.bindLong(4, repeat ? 1L: 0L);
        }
 
        Long idSubject = entity.getIdSubject();
        if (idSubject != null) {
            stmt.bindLong(5, idSubject);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Students readEntity(Cursor cursor, int offset) {
        Students entity = new Students( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // age
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // repeat
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // idSubject
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Students entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAge(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setRepeat(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setIdSubject(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Students entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Students entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
